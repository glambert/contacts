// ----------------------------------------------------------------------------
// Utilities - Helpers
//
// TODO: create partial for each type of utility + add responsive modifiers
//
// References:
// http://csswizardry.com/2015/06/contextual-styling-ui-components-nesting-and-implementation-detail/
// http://johnpolacek.github.io/expressive-css/
// http://danielmall.com/articles/content-display-patterns/
// ----------------------------------------------------------------------------


// stylelint inline disabled
// ------------------------------------
// stylelint-disable block-opening-brace-space-before


// Micro clearfix, as per:
// css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
// ------------------------------------

.u-cf,
.u-clearfix {
  @include clearfix();
}


// Color
// ------------------------------------

.u-color-white               { color: $color-white; }
.u-color-primary             { color: $color-primary; }
.u-color-secondary           { color: $color-secondary; }
.u-color-headings            { color: $color-headings; }
.u-color-text                { color: $color-text; }
.u-color-text-light          { color: $color-text-light; }
.u-color-text-dim            { color: $color-text-dim; }
.u-color-link                { color: $color-link; }
.u-color-border              { color: $color-border; }
.u-color-grey-800            { color: $color-grey-800; }


// Background
// ------------------------------------

.u-bg-gray                   { background-color: $color-grey-100; }
.u-bg-white                  { background-color: $color-white; }
.u-bg-primary                { background-color: $color-primary; }
.u-bg-secondary              { background-color: $color-secondary; }


// Border
// ------------------------------------

.u-border                    { border: 1px solid $color-border; }
.u-border-top                { border-top: 1px solid $color-border; }
.u-border-left               { border-left: 1px solid $color-border; }
.u-border-bot                { border-bottom: 1px solid $color-border; }
.u-border-right              { border-right: 1px solid $color-border; }

// Overflow
// ------------------------------------

.u-overflow-hidden           { overflow: hidden; }

// Dotted
.u-border-dotted-bot         { border-bottom: 1px dotted $color-border; }

// Radius
.u-border-radius             { border-radius: $global-border-radius; }
.u-border-radius-top-left    { border-top-left-radius: $global-border-radius; }
.u-border-radius-top-right   { border-top-right-radius: $global-border-radius; }
.u-border-radius-bot-left    { border-bottom-left-radius: $global-border-radius; }
.u-border-radius-bot-right   { border-bottom-right-radius: $global-border-radius; }
.u-border-radius-special     { @include breakpoint($bp-sm) { border-radius: $global-border-radius; } }

.u-border-radius-top {
  border-top-left-radius: $global-border-radius;
  border-top-right-radius: $global-border-radius;
}


// Semi-fixed width elements, so we can constrain content
// Use breakpoint map (and their abbreviations) set in global settings for width
// ------------------------------------

@each $bp-abbr, $bp-value in $bp-map {
  .u-width-#{$bp-abbr}       { max-width: $bp-value; }
}

// Ideal line character length (45-90) max width, depending on $base-font-size
// http://practicaltypography.com/line-length.html
// TODO: find a bulletproof formula, 35 as a multiplier is a "magic" number
// to arrive at approximately 90 characters wide max.
.u-width-ideal               { max-width: to-rem($base-font-size * 40); }

// Common percent-based width, halves, thirds and quarters. For more control
// and options, use the grid component
.u-width-1-2                 { width: 50%; }
.u-width-1-3                 { width: 33.3333333333%; }
.u-width-2-3                 { width: 66.6666666667%; }
.u-width-1-4                 { width: 25%; }
.u-width-3-4                 { width: 75%; }
.u-width-full                { width: 100%; }

// Reset width
.u-width-auto                { max-width: auto; }


// Text
// ------------------------------------

// General
.u-text-uc,
.u-text-uppercase            { text-transform: uppercase; }

.u-text-lc,
.u-text-lowercase            { text-transform: lowercase; }
.u-text-break                { word-break: break-all; }

.u-text-left                 { text-align: left; }
.u-text-center               { text-align: center; }
.u-text-valign               { vertical-align: middle; }
.u-text-right                { text-align: right; }
.u-text-capitilize           { text-transform: capitalize; }
.u-text-italic               { font-style: italic; }
.u-text-bold                 { font-weight: bold; }
.u-text-underline            { text-decoration: underline; }

// Sizes, modular scale based
.u-text-0                    { @include font-size-ms(0); }
.u-text-1                    { @include font-size-ms(1); }
.u-text-2                    { @include font-size-ms(2); }
.u-text-3                    { @include font-size-ms(3); }
.u-text-4                    { @include font-size-ms(4); }
.u-text-5                    { @include font-size-ms(5); }
.u-text-6                    { @include font-size-ms(6); }

// Exception for negative modular-scale sizes, use non-responsive font-size-ms
.u-text-n1                   { @include font-size-ms(-1, null, false); }
.u-text-n2                   { @include font-size-ms(-2, null, false); }
.u-text-n3                   { @include font-size-ms(-3, null, false); }


// Responsive text utilities, passed to bp-class() mixin.
// Returns class for each breakpoint in $bp-map:
// .u-ta-r@tn, .u-ta-r@sm etc.
// NOTE:
// Could follow emmet shorthands for names, swapping ':' by '-' or even just by removing it,
// for example 'ta:r' -> 'u-tar' or 'u-ta-r' (see http://docs.emmet.io/cheat-sheet/).
// Saved in variable first instead of passing map directly as parameter
// because of syntax highlighting issues.
$responsive-text-helpers: (
  'u-text-left': ('text-align': left),
  'u-text-right': ('text-align': right),
  'u-text-center': ('text-align': center)
);
@include bp-class($responsive-text-helpers);


// Visibility
// ------------------------------------

.u-hide,
.u-display-none              { display: none; }

.u-show,
.u-display-block             { display: block; }

.u-show-inline,
.u-display-inline-block      { display: inline-block; }


// Position
// ------------------------------------

.u-pos-relative              { position: relative; }
.u-pos-absolute              { position: absolute; }
.u-pos-fixed                 { position: fixed; }

.u-pos-top-left              { top: 0; left: 0; }
.u-pos-top-right             { top: 0; right: 0; }
.u-pos-bot-left              { bottom: 0; left: 0; }
.u-pos-bot-right             { bottom: 0; right: 0; }

.u-float-right               { float: right; }
.u-float-left                { float: left; }
.u-float-none                { float: none; }


// Block
// ------------------------------------

.u-block-center              { margin-left: auto; margin-right: auto; }


// General spacing helpers, based on vertical rhythm with `vr-rem()` function.
// Will output the following: `.u-{m|p}{side}-{multiplier}`
// Example: `u-mb-2` -> `margin-bottom: vr-rem(2)`
//
// TODO:
// - Create responsive variants (necessary?)
// - Move to own 07-utilities/_spacing.scss partial
// ------------------------------------

// Set number of base multipler used for spacing helpers
$helpers-spacing-multiplier: 10 !default;

// Don't touch, used to loop over each available direction
$helpers-spacing-sides: ('top', 'left', 'bottom', 'right');

// All sides spacing
@for $i from 0 through $helpers-spacing-multiplier {
  $value: if($i == 0, 0, vr-rem($i));

  .u-m-#{$i},
  .u-marg-#{$i} { margin: $value; }

  .u-p-#{$i},
  .u-pad-#{$i} { padding: $value; }

  // Vertical (top/bottom)
  .u-mv-#{$i},
  .u-marg-vert-#{$i} { margin-top: $value; margin-bottom: $value; }

  .u-pv-#{$i},
  .u-pad-vert-#{$i} { padding-top: $value; padding-bottom: $value; }

  // Horizontal (left/right)
  .u-mh-#{$i},
  .u-marg-hor-#{$i} { margin-left: $value; margin-right: $value; }

  .u-ph-#{$i},
  .u-pad-hor-#{$i} { padding-left: $value; padding-right: $value; }

  // Apply to set of direct children, for example cols in a row.
  .u-m-child-#{$i} > *,
  .u-marg-child-#{$i} > * { margin: $value; }

  .u-p-child-#{$i},
  .u-pad-child-#{$i} > * { padding: $value; }
}

// Create classes by looping
@each $side in $helpers-spacing-sides {

  // Special-case for `bot` shorthand currently used
  $sideclass: if($side == 'bottom', 'bot', $side);
  $sideclass-short: str-slice($sideclass, 0, 1);

  @for $i from 0 through $helpers-spacing-multiplier {
    $value: if($i == 0, 0, vr-rem($i));

    .u-m#{$sideclass-short}-#{$i},
    .u-marg-#{$sideclass}-#{$i} { margin-#{$side}: $value; }

    .u-p#{$sideclass-short}-#{$i},
    .u-pad-#{$sideclass}-#{$i} { padding-#{$side}: $value; }

    // Apply to set of direct children, for example cols in a row.
    .u-m#{$sideclass-short}-child-#{$i} > *,
    .u-marg-#{$sideclass}-child-#{$i} > * { margin-#{$side}: $value; }

    .u-p#{$sideclass-short}-child-#{$i} > *,
    .u-pad-#{$sideclass}-child-#{$i} > * { padding-#{$side}: $value; }
  }
}

// Use `gutter` suffix for gutter-matched spacing helper
@each $side in $helpers-spacing-sides {

  // Special-case for `bot` shorthand currently used
  $sideclass: if($side == 'bottom', 'bot', $side);
  $sideclass-short: str-slice($sideclass, 0, 1);

  .u-m#{$sideclass-short}-g,
  .u-marg-#{$sideclass}-g { margin-#{$side}: $gutter-width; }

  .u-p#{$sideclass-short}-g,
  .u-pad-#{$sideclass}-g { padding-#{$side}: $gutter-width; }

  // Apply to set of direct children, for example cols in a row.
  .u-m#{$sideclass-short}-child-g > *,
  .u-marg-#{$sideclass}-child-g > * { margin-#{$side}: $gutter-width; }

  .u-p#{$sideclass-short}-child-g,
  .u-pad-#{$sideclass}-child-g > * { padding-#{$side}: $gutter-width; }
}

// All sides gutter-matched spacing helpers
.u-m-g,
.u-marg-g { margin: $gutter-width; }

.u-p-g,
.u-pad-g { padding: $gutter-width; }
